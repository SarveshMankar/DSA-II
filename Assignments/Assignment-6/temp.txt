void primsAlgorithm(Graph g,int v){
   if(g.size == 0 || v >= g.size || v < 0 )
        return ;
    
    int totalWeight = 0;
    int visited = (int)calloc(g.size,sizeof(int)); //calloc beacuse bydefault it makes it 0
    if(!visited)
    return;

    int tempWeight = 0;
    int n = g.size;
    for(int i = 0 ; i < n ; i++){
        int minIndex = INT_MAX;
        int Value = INT_MAX;
        printf("%d ",v);
        totalWeight += tempWeight  ;
        
        visited[v] = 1;
        for(int j = 0 ; j < n ; j++){
            if(visited[j]){
            Node* temp = g.column[j];
            while(temp){
                if(temp -> weight < Value && !visited[temp -> index]){
                    Value = temp -> weight;
                    minIndex = temp -> index;
                }
                temp = temp -> next;
            }
            }
        }
        v = minIndex;
        tempWeight = Value;
    }
    printf("Weight : %d",totalWeight);
    return ;        
}
void kruskalsAlgorithm(Graph g){

    // if(detectCycle(g)){
        // removeCycle(&g);
    // }   
    int n = g.size;
    minHeap heap;
    initminHeap(&heap,n);
    int countWeight = 0;
    int visited = (int)calloc(g.size,sizeof(int)); //calloc beacuse bydefault it makes it 0
    if(!visited)
    return;

    int set = (int)calloc(g.size,sizeof(int)); //calloc beacuse bydefault it makes it 0
    if(!set)
    return;
    
    for(int i = 0 ; i < n ; i++){
        set[i] = i ;
    }

    for(int i = 0 ; i < n; i++){
        Node* temp = g.column[i];
        while (temp)
        {   
            visited[i] = 1;
            if(visited[temp -> index] == 0) 
            // printf("\nStart : %d  , end : %d , weight : %d\n",i,temp -> index,temp ->weight);
            insert(&heap,i,temp -> index,temp -> weight);
            temp = temp -> next;
        }
    }
    int count = 0;
    do{        
        Data getTop = popNode(&heap);
        if(getTop.weight == INT_MIN)
            break;

        if(set[getTop.start] != set[getTop.end] )
        {
            count += getTop.weight; 
            printf("\nStart : %c  , end : %c , weight : %d\n",getTop.start+ 'A',getTop.end+'A',getTop.weight);
            int temp = set[getTop.end];
            int replace = set[getTop.start];
            for(int i = 0 ; i < n; i++){
                if(set[i] == temp)
                    set[i] = replace;
            }

        }
    }
        while(1);
        printf("\n%d Weight ", count);
        return ;
}